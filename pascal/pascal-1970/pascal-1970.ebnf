(* 
 * Pascal (original, 1970) EBNF grammar
 *
 * Transcribed from: The programming language Pascal
 * Author: Niklaus Wirth
 * Year of Publication / Release: 1970
 * ETH Zürich Library
 * Rights / license: In Copyright - Non-Commercial Use Permitted
 * Permanent link: https://doi.org/10.3929/ethz-a-004150844
 * 
 * Note: The original publication follows a BNF notation that is precisely described.
 *       Citation: "According to traditional Backus-Naur form, syntactic constructs are denoted by
 *       English words enclosed between the angular brackets < and >. These words also describe the
 *       nature or meaning of the construct, and are used in the accompanying description of semantics.
 *       Possible repetition of a construct is indicated by an asterisk (0 or more repetitions) or a
 *       circled plus sign (1 or more repetitions). If a sequence of constructs to be repeated consists
 *       of more than one element, it is enclosed by the meta-brackets { and }."
 * 
 * Note 2: The document published in Acta Informatica, Vol. 1, Fasc. 1, 1971 pp. 35-63, even when
 *         the page numbering is correct, seem to have a couple of pages/sections missing between
 *         section 8 Expressions and section 9 Statements. The document from ETH Library is older and
 *         contains the missing pages/sections. There are some other differences between both documents,
 *         even when both seem to be a transcription one from another.
 *         I used both versions to transcribe the EBNF grammar, so as to minimize the chance of errors.
 *         In what follows, I'll refer to the ETH Zürich Library document as ETHZL, and to the one
 *         published in Acta Informatica, Vol. 1, Fasc. 1, 1971 pp. 35-63, as ACTAI.
 *)

(*
 *  Section 3 : Notation, Terminology and Vocabulary
 *)

letter ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" |
           "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" |
           "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" |
           "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" .

digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .

(*
 * ETHZL does not contain the simbol for base ten ("⏨"), ACTAI has it, but in turn it does
 * not contain the simbol "label".
 *)
special-symbol ::= "+" | "-" | "*" | "/" | "∨" | "∧" | "¬" | "=" | "≠" | "<" | ">" |
                   "≦" | "≧" | "(" | ")" | "[" | "]" | "{" | "}" | ":=" | "⏨" | "." |
                   "," | ";" | ":" | "'" | "↑" | "div" | "mod" | "nil" | "in" | "if" |
                   "then" | "else" | "case" | "of" | "repeat" | "until" | "while" |
                   "do" | "for" | "to" | "downto" | "begin" | "end" | "with" | "goto" |
                   "const" | "var" | "type" | "array" | "record" | "powerset" | "file" |
                   "class" | "function" | "procedure" | "label" .

(*
 *  Section 4 : Identifiers and Numbers
 *)

identifier ::= letter letter-or-digit* .

letter-or-digit ::= letter | digit .

number ::= integer | real-number .

integer ::= digit+.

real-number ::= digit+ "." digit+ |
                digit+ "." digit+ "⏨" scale-factor |
                integer "⏨" scale-factor .

scale-factor ::= digit+ | sign digit+ .

sign = "+" | "-" .

(*
 *  Section 5 : Constant Definitions
 *)

unsigned-constant ::= number | "'" character+ "'" | identifier | "nil" .

constant ::= unsigned-constant | sign number .

constant-definition ::= identifier "=" constant .

(*
 *  Section 6 : Data Type Definitions
 *)

type ::= scalar-type | subrange-type | array-type | record-type | powerset-type |
         file-type | class-type | pointer-type | type-identifier .

type-identifier ::= identifier .

type-definition ::= identifier "=" type .

scalar-type ::= "(" identifier {"," identifier}* ")" .

subrange-type ::= constant ".." constant .

array-type ::= "array" "[" index-type {"," index-type}* "]" "of" component-type .

index-type ::= scalar-type | subrange-type | type-identifier .

component-type ::= type .

record-type ::= "record" field-list "end" .

field-list ::= fixed-part | fixed-part ";" variant-part | variant-part .

fixed-part ::= record-section { ";" record-section }* .

record-section ::= field-identifier { "," field-identifier }* ":" type .

variant-part ::= "case" tag-field ":" type-identifier "of" variant { ";" variant }* .

variant ::= { case-label ":" }+ "(" field-list ")" | { case-label }+ .

case-label ::= unsigned-constant .

tag-field ::= identifier .

powerset-type ::= "powerset" type-identifier | "powerset" subrange-type .

file-type ::= "file" "of" type .

class-type ::= "class" max-num "of" type .

max-num ::= integer .

pointer-type ::= "↑" class-variable .

class-variable ::= variable .

(*
 *  Section 7 : Declaration and Denotation of Variables
 *)

variable-declaration ::= identifier { "," identifier }* ":" type .

variable ::= entire-variable | component-variable .

entire-variable ::= variable-identifier .

variable-identifier ::= identifier .

component-variable ::= indexed-variable | field-designator | current-file-component | referenced-component .

indexed-variable ::= array-variable "[" expression { "," expression }* "]" .

array-variable ::= variable .

field-designator ::= record-variable "." field-identifier .

record-variable ::= variable .

field-identifier ::= identifier .

current-file-component ::= file-variable "↑" .

file-variable ::= variable .

referenced-component ::= pointer-variable "↑" .

pointer-variable ::= variable .

(*
 *  Section 8 : Expressions
 *)

factor ::= variable | unsigned-constant | function-designator | set | "(" expression ")" | "¬" factor .

set ::= "[" expression { "," expression }* "]" | "[]" .

term ::= factor | term multiplying-operator factor .

simple-expression ::= term | simple-expression adding-operator term | adding-operator term .

expression ::= simple-expression | simple-expression relation-operator simple-expression .

multiplying-operator ::= "*" | "/" | "div" | "mod" | "∧" .

adding-operator ::= "+" | "-" | "∨" .

relation-operator ::= "=" | "≠" | "<" | "≦" | "≧" | ">" | "in" .

function-designator ::= function-identifier "(" actual-parameter { "," actual-parameter }* ")" .

function-identifier ::= identifier .

(*
 *  Section 9 : Statements
 *)

statement ::= simple-statement | structured-statement .

simple-statement ::= assignment-statement | procedure-statement | goto-statement .

assignment-statement ::= variable ":=" expression | function-identifier ":=" expression .

procedure-statement ::= procedure-identifier |
                        procedure-identifier "(" actual-parameter { "," actual-parameter }* ")" .

procedure-identifier ::= identifier .

actual-parameter ::= expression | variable | procedure-identifier | function-identifier .

goto-statement ::= "goto" label .

label ::= integer .

structured-statement ::= compound-statement | conditional-statement | repetitive-statement | with-statement .

compound-statement ::= "begin" component-statement { ";" component-statement }* "end" .

component-statement ::= statement | label-definition statement .

label-definition ::= label ":" .

conditional-statement ::= if-statement | case-statement .

if-statement ::= "if" expression "then" statement | "if" expression "then" statement "else" statement .

case-statement ::= "case" expression "of" case-list-element { ";" case-list-element }* "end" .

case-list-element ::= { case-label ":" }+ statement | { case-label ":" }+ .

repetitive-statement ::= while-statement | repeat-statement | for-statement .

while-statement ::= "while" expression "do" statement .

repeat-statement ::= "repeat" statement { ";" statement }* "until" expression .

for-statement ::= "for" control-variable ":=" for-list "do" statement .

for-list ::= initial-value "to" final-value | initial-value "downto" final-value .

control-variable ::= identifier .

initial-value ::= expression .

final-value ::= expression .

with-statement ::= "with" record-variable "do" statement .

(*
 *  Section 10 : Procedure Declarations
 *)

procedure-declaration ::= procedure-heading
                          label-declaration-part
                          constant-definition-part
                          type-definition-part
                          variable-declaration-part 
                          procedure-and-function-declaration-part
                          statement-part .

procedure-heading ::= "procedure" identifier ";" |
                      "procedure" identifier "(" formal-parameter-section { ";" formal-parameter-section }* ")" .

formal-parameter-section ::= parameter-group |
                             "const" parameter-group { ";" parameter-group }* |
                             "var" parameter-group { ";" parameter-group }* |
                             "function" parameter-group |
                             "procedure" identifier { "," identifier }* .

parameter-group ::= identifier { "," identifier }* ":" type-identifier .

label-declaration-part ::= empty | "label" label { "," label }* .

constant-definition-part ::= empty | "const" constant-definition { "," constant-definition }* ";" .

type-definition-part ::= empty | "type" type-definition { ";" type-definition }* ";" .

variable-declaration-part ::= empty | "var" variable-declaration { ";" variable-declaration }* ";" .

procedure-and-function-declaration-part ::= empty | { procedure-or-function-declaration ";" }* .

procedure-or-function-declaration ::= procedure-declaration | function-declaration .

statement-part ::= compound-statement .

(*
 *  Section 11 : Function Declarations
 *)

function-declaration ::= function-heading
                         label-declaration-part
                         constant-definition-part
                         type-definition-part
                         variable-declaration-part 
                         procedure-and-function-declaration-part
                         statement-part .

function-heading ::= "function" identifier 
                     "(" formal-parameter-section { ";" formal-parameter-section }* ")" ":" result-type .

result-type ::= type-identifier .

(*
 *  Section 12 : Programs
 *)

program ::= constant-definition-part
            type-definition-part
            variable-declaration-part
            procedure-and-function-declaration-part
            statement-part "." .
